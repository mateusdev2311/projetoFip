const { initDatabase, closeDatabase, Triagem, HistoricoTriagem, Configuracao } = require('./database');

async function testMongoDBConnection() {
    console.log('üß™ Iniciando testes de conex√£o MongoDB...\n');
    
    try {
        // 1. Testar conex√£o
        console.log('1Ô∏è‚É£ Testando conex√£o com MongoDB...');
        const connected = await initDatabase();
        
        if (!connected) {
            throw new Error('Falha ao conectar com MongoDB');
        }
        console.log('‚úÖ Conex√£o estabelecida com sucesso!\n');
        
        // 2. Testar cria√ß√£o de triagem
        console.log('2Ô∏è‚É£ Testando cria√ß√£o de triagem...');
        const triagemTeste = {
            _id: 'teste-123',
            nome: 'Jo√£o Silva',
            idade: 35,
            genero: 'masculino',
            peso: 75,
            altura: 175,
            frequenciaCardiaca: 80,
            frequenciaRespiratoria: 16,
            temperatura: 36.5,
            pressaoSistolica: 120,
            pressaoDiastolica: 80,
            saturacaoOxigenio: 98,
            nivelConsciencia: 'alerta',
            orientacao: 'orientado',
            intensidadeDor: 3,
            queixaPrincipal: 'Dor de cabe√ßa',
            tempoSintomas: '2 horas',
            sintomas: ['dor-cabeca', 'nausea'],
            doencas: ['hipertensao'],
            prioridade: 'URGENTE',
            pontuacao: 45,
            fatoresRisco: ['Hipertens√£o arterial'],
            fatoresCriticos: [],
            imc: 24.5
        };
        
        const triagemCriada = await Triagem.create(triagemTeste);
        console.log('‚úÖ Triagem criada com sucesso!');
        console.log(`   ID: ${triagemCriada._id}`);
        console.log(`   Nome: ${triagemCriada.nome}`);
        console.log(`   Prioridade: ${triagemCriada.prioridade}\n`);
        
        // 3. Testar busca de triagem
        console.log('3Ô∏è‚É£ Testando busca de triagem...');
        const triagemEncontrada = await Triagem.findById('teste-123');
        
        if (triagemEncontrada) {
            console.log('‚úÖ Triagem encontrada com sucesso!');
            console.log(`   Nome: ${triagemEncontrada.nome}`);
            console.log(`   Idade: ${triagemEncontrada.idade}`);
        } else {
            throw new Error('Triagem n√£o encontrada');
        }
        console.log();
        
        // 4. Testar hist√≥rico
        console.log('4Ô∏è‚É£ Testando registro de hist√≥rico...');
        await HistoricoTriagem.registrarHistorico(
            'teste-123',
            'CRIACAO',
            null,
            triagemTeste
        );
        console.log('‚úÖ Hist√≥rico registrado com sucesso!\n');
        
        // 5. Testar estat√≠sticas
        console.log('5Ô∏è‚É£ Testando estat√≠sticas...');
        const stats = await Triagem.getStats();
        console.log('‚úÖ Estat√≠sticas obtidas com sucesso!');
        console.log(`   Total de triagens: ${stats.estatisticas.total_triagens}`);
        console.log(`   Emerg√™ncias: ${stats.estatisticas.emergencias}`);
        console.log(`   Pontua√ß√£o m√©dia: ${stats.estatisticas.pontuacao_media?.toFixed(2) || 'N/A'}\n`);
        
        // 6. Testar pagina√ß√£o
        console.log('6Ô∏è‚É£ Testando pagina√ß√£o...');
        const resultadoPaginacao = await Triagem.findWithPagination({}, {
            page: 1,
            limit: 5,
            sortBy: 'dataTriagem',
            sortOrder: 'desc'
        });
        console.log('‚úÖ Pagina√ß√£o funcionando!');
        console.log(`   P√°gina: ${resultadoPaginacao.pagination.page}`);
        console.log(`   Total: ${resultadoPaginacao.pagination.total}`);
        console.log(`   P√°ginas: ${resultadoPaginacao.pagination.pages}\n`);
        
        // 7. Testar configura√ß√µes
        console.log('7Ô∏è‚É£ Testando configura√ß√µes...');
        const config = await Configuracao.findOne({ chave: 'versao_sistema' });
        if (config) {
            console.log('‚úÖ Configura√ß√µes funcionando!');
            console.log(`   Vers√£o: ${config.valor}`);
        }
        console.log();
        
        // 8. Limpeza
        console.log('8Ô∏è‚É£ Limpando dados de teste...');
        await Triagem.findByIdAndDelete('teste-123');
        await HistoricoTriagem.deleteMany({ triagem_id: 'teste-123' });
        console.log('‚úÖ Dados de teste removidos!\n');
        
        console.log('üéâ Todos os testes passaram com sucesso!');
        console.log('‚úÖ MongoDB est√° funcionando corretamente!');
        
    } catch (error) {
        console.error('‚ùå Erro durante os testes:', error.message);
        console.error('Stack trace:', error.stack);
    } finally {
        // Fechar conex√£o
        await closeDatabase();
        console.log('\nüîå Conex√£o fechada.');
        process.exit(0);
    }
}

// Executar testes
testMongoDBConnection();
